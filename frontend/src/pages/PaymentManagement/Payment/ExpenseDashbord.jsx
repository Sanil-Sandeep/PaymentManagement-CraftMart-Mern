import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Spinner from '../../../components/Spinner';
import { Link } from 'react-router-dom';
import { AiOutlineEdit } from 'react-icons/ai';
import { BsInfoCircle } from 'react-icons/bs';
import { MdOutlineAddBox, MdOutlineDelete } from 'react-icons/md';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import Header from '../../../components/headerfooter/Header';
import Footer from '../../../components/headerfooter/Footer';
import logo from '../../../images/logo.png';

const ExpensesDashboard = () => {
  const [expenses, setExpenses] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredExpenses, setFilteredExpenses] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);
    axios
      .get('http://localhost:5555/expenses')
      .then((response) => {
        setExpenses(response.data.data);
        setFilteredExpenses(response.data.data);
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
      });
  }, []);

  useEffect(() => {
    handleSearch();
  }, [searchQuery]);

  const handleSearch = () => {
    if (!searchQuery.trim()) {
      setFilteredExpenses(expenses);
      return;
    }

    const results = expenses.filter((expense) =>
      expense.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    setFilteredExpenses(results);
  };

  const totalExpenses = filteredExpenses.reduce((total, expense) => {
    return total + (expense.cost || 0); // Ensure we add zero if cost is undefined
  }, 0);

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(24);
    doc.setFont('Poppins', 'bold');
    doc.text('CraftMart', 14, 22);

    // Add the logo image
    const logoWidth = 45; // Adjust width as needed
    const logoHeight = 30; // Adjust height as needed
    doc.addImage(logo, 'PNG', 160, 10, logoWidth, logoHeight); // Add logo to the right side

    doc.setFontSize(18);
    doc.setFont('Poppins', 'bold');
    doc.text('Expenses Report', 14, 32); // Change title to "Expenses Report"

    const reportDate = new Date().toLocaleDateString();
    doc.setFontSize(12);
    doc.setFont('Poppins', 'normal');
    doc.text(`Date: ${reportDate}`, 14, 42);

    doc.setDrawColor(0, 0, 0);
    doc.setLineWidth(1);
    doc.line(10, 45, 205, 45); // Draw a line

    const tableColumn = ["No", "Date", "ID", "Name", "Expense", "Amount"];
    const tableRows = filteredExpenses.map((expense, index) => [
        index + 1,
        new Date(expense.createdAt).toLocaleDateString(),
        expense.eID,
        expense.name,
        expense.expense,
        `Rs ${expense.cost ? expense.cost.toFixed(2) : '0.00'}` // Ensuring cost is defined
    ]);

    doc.autoTable(tableColumn, tableRows, {
        startY: 50,
        theme: 'grid',
        headStyles: {
            fillColor: '#330D0F',
            textColor: '#FFFFFF',
            font: 'Poppins',
            fontSize: 8,
            halign: 'center',
        },
        bodyStyles: {
            font: 'Poppins',
            fontSize: 10,
            valign: 'top',
            overflow: 'linebreak',
            cellPadding: 1,
            cellWidth: 'wrap',
        },
        margin: { left: 10, right: 14 },
        columnStyles: {
            0: { cellWidth: 10, halign: 'center' },
            1: { cellWidth: 50, halign: 'center' },
            2: { cellWidth: 35, halign: 'left' },
            3: { cellWidth: 30, halign: 'left' },
            4: { cellWidth: 40, halign: 'right' },
            5: { cellWidth: 30, halign: 'right' },
        },
        styles: {
            cellPadding: 1,
            font: 'Poppins',
        },
        didDrawPage: function (data) {
            doc.setFontSize(10);
            doc.text('Generated by Craftmart', 14, doc.internal.pageSize.height - 10);
        },
    });

    const totalPriceY = doc.autoTable.previous.finalY + 10;
    doc.setFontSize(14);
    doc.setFont('Poppins', 'bold');
    doc.text(`Total Expenses: Rs ${totalExpenses.toFixed(2)}`, 14, totalPriceY); // Ensure total is formatted

    doc.save('expenses-report.pdf');
};


  return (
    <div>
      <Header />
      <div style={styles.page}>
        <div style={styles.container}>
        <div style={styles.buttonContainer}>
          <Link to="/expenses">
            <button style={styles.buttonexpense}>Expenses</button>
          </Link>
          <Link to="/payments">
            <button style={styles.buttonincome}>Incomes</button>
          </Link>
          <Link to="/profits">
           <button style={styles.buttonprofit}>Net Profit</button>
          </Link>
        </div>
          <div style={styles.header}>
            <h1 style={styles.title}>Expenses Management</h1>
            <Link to='/expenses/create'>
              <MdOutlineAddBox style={styles.addIcon} />
            </Link>
          </div>

          <div style={styles.searchContainer}>
            <input
              type="text"
              placeholder="Search by Description or Category"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              style={styles.searchInput}
            />
            <button onClick={handleSearch} style={styles.searchButton}>Search</button>
          </div>

          {loading ? (
            <Spinner />
          ) : (
            <>
              {filteredExpenses.length > 0 ? (
                <>
                  <button
                    className="btn btn-primary"
                    onClick={generatePDF}
                    style={styles.downloadButton}
                  >
                    Download Expenses Report
                  </button>
                  <table style={styles.table}>
                    <thead>
                      <tr>
                        <th style={styles.th}>No</th>
                        <th style={styles.th}>Date</th>
                        <th style={styles.th}>ID</th>
                        <th style={styles.th}>Name</th>
                        <th style={styles.th}>Expense</th>
                        <th style={styles.th}>Amount</th>
                        <th style={styles.th}>Operations</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredExpenses.map((expense, index) => (
                        <tr key={expense._id}>
                          <td style={styles.td}>{index + 1}</td>
                          <td style={styles.td}>{new Date(expense.createdAt).toLocaleDateString()}</td>
                          <td style={styles.td}>{expense.eID}</td>
                          <td style={styles.td}>{expense.name}</td>
                          <td style={styles.td}>{expense.expense}</td>
                          <td style={styles.td}>Rs {expense.cost}</td>
                          <td style={styles.td}>
                            <div style={styles.operations}>
                              <Link to={`/expenses/details/${expense._id}`}>
                                <BsInfoCircle style={{ fontSize: '1.5rem', color: '#047857', cursor: 'pointer' }} />
                              </Link>
                              <Link to={`/expenses/edit/${expense._id}`}>
                                <AiOutlineEdit style={{ fontSize: '1.5rem', color: '#d97706', cursor: 'pointer' }} />
                              </Link>
                              <Link to={`/expenses/delete/${expense._id}`}>
                                <MdOutlineDelete style={{ fontSize: '1.5rem', color: '#dc2626', cursor: 'pointer' }} />
                              </Link>
                            </div>
                          </td>
                        </tr>
                      ))}
                      <tr>
                        <td colSpan="5" style={totalPriceRowStyle.totalPriceLabel}>Total Expenses:</td>
                        <td style={totalPriceRowStyle.totalPriceValue}>Rs {totalExpenses}</td>
                        <td style={totalPriceRowStyle.emptyCell}></td>
                      </tr>
                    </tbody>
                  </table>
                </>
              ) : (
                <p style={{ textAlign: 'center', marginTop: '2rem' }}>No results found.</p>
              )}
            </>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
};


// CSS styles


export default ExpensesDashboard;
